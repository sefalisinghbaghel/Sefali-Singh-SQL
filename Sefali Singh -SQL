CREATE TABLE STUDENT(
ROLL_NO CHAR(6) PRIMARY KEY,
STUDENT_NAME VARCHAR(20),
COURSE VARCHAR(20),
DOB DATE 
);
CREATE TABLE SOCIETY(
SOC_ID CHAR(6) PRIMARY KEY,
SOC_NAME VARCHAR(20),
MENTOR_NAME VARCHAR(15),
TOTAL_SEATS INT UNSIGNED
);
CREATE TABLE ENROLLMENT(
ROLL_NO CHAR(6),
SID CHAR(6),
DATE_OF_ENROLLMENT DATE,
FOREIGN KEY (ROLL_NO) references STUDENT(ROLL_NO),
FOREIGN KEY (SID) REFERENCES SOCIETY(SOC_ID)
);
SET @N = 10;
SELECT * FROM SOCIETY
WHERE TOTAL_SEATS > @N;
SELECT * FROM STUDENT;
INSERT INTO STUDENT (ROLL_NO,STUDENT_NAME,COURSE,DOB)
VALUES 
('X011','ANKIT','COMPUTER_SCIENCE','2000-5-20'),
('X012','TONU','CHEMISTRY','2005-3-10'),
('X013','UTKARSH','COMPUTER_SCIENCE','2002-6-10'),
('X014','ASHUTOSH','COMPUTER_SCIENCE','2005-7-8'),
('X015','ASTIK','PHYSICS','2001-2-15'),
('X016','RISHAB','MATHS','2000-10-20'),
('X017','SUJEET','CHEMISTRY','2001-5-10'),
('X018','AMIT','SOFTWARE_DEVELPOMENT','1999-2-2'),
('X019','RISHI','COMPUTER_SCIENCE','1995-7-4'),
('X020','VINAY','CHEMISTRY','2001-3-28'),
('X021','HARSH','MATHS','2004-12-30'),
('X022','SUSHANT','BIOLOGY','2003-10-22'),
('X023','RAVI','CHEMISTRY','2001-5-21'),
('X024','VICKY','COMPUTER_SCIENCE','2001-7-29'),
('X09','MONU','MATHS','2002-7-20'),
('Z09','AYUSH','COMPUTER_SIENCE','2001-4-18'),
('X025','ASHU','CHEMISTRY','2003-2-17'),
('X026', 'LUCKY', 'MATHS', '2014-04-24');
SELECT * FROM STUDENT;
INSERT INTO SOCIETY (SOC_ID, SOC_NAME, MENTOR_NAME, TOTAL_SEATS)
VALUES
(101,'NSS','GUPTA',10),
(102,'DEBATING','SAH',20),
(103,'DANCE','CHOUDHARY',10),
(104,'SASHAKT','RAJ',4),
(105,'JAZBA','VERMA',8);
SELECT * FROM SOCIETY;
INSERT INTO ENROLLMENT (ROLL_NO, SID, DATE_OF_ENROLLMENT)
VALUES 
('X011',101,'2000-5-10'),
('X012',102,'2005-3-15'),
('X013',101,'2002-6-02'),
('X014',103,'2005-7-18'),
('X015',104,'2001-2-05'),
('X016',105,'2000-10-01'),
('X017',102,'2001-5-09'),
('X018',103,'1999-2-05'),
('X019',101,'1995-7-06'),
('X020',102,'2001-3-29'),
('X021',104,'2004-12-12'),
('X022',101,'2003-10-11'),
('X023',103,'2001-5-17'),
('X024',101,'2001-7-25'),
('X09',103,'2002-7-14'),
('Z09',101,'2001-4-16'),
('X025',102,'2003-2-06'),
('X09',102,'2002-7-14');
SELECT * FROM ENROLLMENT;
# QUESTIONS
#1. Retrieve names of students enrolled in any society.
SELECT STUDENT_NAME
FROM STUDENT
WHERE ROLL_NO IN (SELECT ROLL_NO FROM ENROLLMENT);

#2. Retrieve all society names.
SELECT SOC_NAME
FROM SOCIETY;

#3. Retrieve students names starting with the letter ‘A’.
SELECT STUDENT_NAME 
FROM STUDENT
WHERE STUDENT_NAME LIKE 'A%'; 

#4. Retrieve students' details studying in courses ‘computer science’ or ‘chemistry’.
SELECT STUDENT_NAME
FROM STUDENT
WHERE COURSE IN('COMPUTER_SCIENCE','CHEMISTRY');


#5. Retrieve students’ names whose roll no either starts with ‘X’ or ‘Z’ and ends with ‘9’.
SELECT STUDENT_NAME
FROM STUDENT
WHERE (ROLL_NO LIKE 'X%' OR ROLL_NO LIKE 'Z%') AND ROLL_NO LIKE '%9';

#6. Find society details with more than N TotalSeats where N is to be input by the user.
SELECT *
FROM SOCIETY
WHERE TOTAL_SEATS > 15;

SET SQL_SAFE_UPDATES = 0;

#7.Update society table for the mentor name of a specific society:
UPDATE SOCIETY 
SET MENTOR_NAME = 'PRAJAPATI' 
WHERE SOC_ID = '105';

SELECT *
FROM SOCIETY;

#8.	Find society names in which more than five students have enrolled:
SELECT SOC_NAME 
FROM SOCIETY 
WHERE SOC_ID IN (SELECT SID FROM ENROLLMENT GROUP BY SID HAVING COUNT(*) > 5);

#9.Find the name of the youngest student enrolled in society ‘NSS’:
SELECT STUDENT_NAME 
FROM STUDENT 
WHERE ROLL_NO = (SELECT ROLL_NO FROM ENROLLMENT WHERE SID = 101 ORDER BY DOB  LIMIT 1);

#10.Find the name of the most popular society (on the basis of enrolled students):
SELECT SOC_NAME
FROM SOCIETY
WHERE SOC_ID = (SELECT SID FROM ENROLLMENT GROUP BY SID ORDER BY COUNT(*) DESC LIMIT 1);

#11.Find the name of two least popular societies (on the basis of enrolled students): 
SELECT SOC_NAME
FROM SOCIETY
ORDER BY (SELECT COUNT(*) FROM ENROLLMENT WHERE ENROLLMENT.SID = SOCIETY.SOC_ID) ASC LIMIT 2;

#12.Find the student names who are not enrolled in any society:
SELECT STUDENT_NAME
FROM STUDENT
WHERE ROLL_NO NOT IN (SELECT ROLL_NO FROM ENROLLMENT);

#13.Find the student names enrolled in at least two societies:
SELECT STUDENT_NAME
FROM STUDENT
WHERE ROLL_NO IN (SELECT ROLL_NO FROM ENROLLMENT GROUP BY ROLL_NO HAVING COUNT(*) >= 2);

#14.Find society names in which maximum students are enrolled:
SELECT SOC_NAME 
FROM SOCIETY 
WHERE SOC_ID = (SELECT SID FROM ENROLLMENT GROUP BY SID ORDER BY COUNT(*) DESC LIMIT 1);


#15.Find the names of all students who have enrolled in any society and society names in which at least one student has enrolled:
SELECT DISTINCT STUDENT.STUDENT_NAME, SOCIETY.SOC_NAME
FROM STUDENT
JOIN ENROLLMENT ON STUDENT.ROLL_NO = ENROLLMENT.ROLL_NO
JOIN SOCIETY ON ENROLLMENT.SID = SOCIETY.SOC_ID;
# Another code for same query
SELECT 
    (SELECT STUDENT_NAME FROM STUDENT WHERE ROLL_NO = ENROLLMENT.ROLL_NO) AS STUDENT_NAME,
    (SELECT distinct SOC_NAME FROM SOCIETY WHERE SOC_ID = ENROLLMENT.SID) AS SOC_NAME
FROM ENROLLMENT;

#16.Find names of students who are enrolled in any of the three societies ‘Debating’, ‘Dance’, and ‘Sashakt’:
SELECT DISTINCT STUDENT.STUDENT_NAME
FROM STUDENT
WHERE ROLL_NO IN ( SELECT ROLL_NO FROM ENROLLMENT WHERE SID IN (SELECT SOC_ID FROM SOCIETY WHERE SOC_NAME IN ('DEBATING','DANCE','SASHAKT')));


#17.Find society names such that its mentor has a name with ‘Gupta’ in it:
SELECT SOC_NAME 
FROM SOCIETY 
WHERE MENTOR_NAME LIKE '%GUPTA%';

#18.Find the society names in which the number of enrolled students is only 10% of its capacity:
SELECT SOC_NAME
FROM SOCIETY WHERE (SELECT COUNT(*)FROM ENROLLMENT WHERE ENROLLMENT.SID = SOCIETY.SOC_ID) <= 0.1 * TOTAL_SEATS; 

#19.Display the vacant seats for each society:
SELECT 
SOC_NAME,TOTAL_SEATS - (SELECT COUNT(*)FROM ENROLLMENT WHERE ENROLLMENT.SID = SOCIETY.SOC_ID) AS VACANT_SEATS
FROM SOCIETY;

SET SQL_SAFE_UPDATES = 0;

#20.Increment Total Seats of each society by 10%:
UPDATE SOCIETY
SET TOTAL_SEATS = TOTAL_SEATS * 1.1;   

SELECT * FROM SOCIETY;

#20.Increment Total Seats of each society by 10%:
UPDATE SOCIETY
SET TOTAL_SEATS = TOTAL_SEATS + TOTAL_SEATS * 0.1; 
 
SELECT * FROM SOCIETY;

#21.Add enrollment fees paid('yes'/'No') field in the enrollment table. 
ALTER TABLE ENROLLMENT
ADD COLUMN ENROLLMENT_FEES_PAID  VARCHAR(5);  

SELECT * FROM ENROLLMENT;



#22.Update date of enrollment of society id 's1' to '2018-01-15','s2' to current date and 's3' to '2018-01-02'.(Here s1 = 101 , s2 = 102) 
UPDATE ENROLLMENT SET DATE_OF_ENROLLMENT = '2018-01-15' WHERE SID = 101;

UPDATE ENROLLMENT SET DATE_OF_ENROLLMENT = '2018-01-02' WHERE SID = 102 ;
SELECT * FROM ENROLLMENT;


#  ANOTHER METHOD  BUT RIGHT METHOD  OF QUES 22

UPDATE ENROLLMENT SET DATE_OF_ENROLLMENT=
CASE WHEN SID = 101 THEN '2018-01-15'
WHEN SID = 102 THEN '2018-01-02'
ELSE DATE_OF_ENROLLMENT
END
WHERE SID IN (101,102);

SELECT * FROM ENROLLMENT;



#23.Create a view to keep track of society names with the total number of students enrolled in it. 
CREATE VIEW SOCIETYENROLLMENTVIEW AS
 SELECT SOC_NAME FROM SOCIETY LEFT JOIN ENROLLMENT ON SOCIETY.SOC_ID = ENROLLMENT.SID GROUP BY SOC_ID;






#24.Find student names enrolled in all the societies. 
SELECT STUDENT_NAME
FROM STUDENT
WHERE ROLL_NO IN (SELECT ROLL_NO FROM ENROLLMENT GROUP BY ROLL_NO HAVING COUNT(DISTINCT SID) = (SELECT COUNT(*) FROM SOCIETY));
#25.Count number of societies with more than 5 student enrolled it. 
SELECT SOC_NAME
FROM SOCIETY
WHERE SOC_ID IN ( SELECT SID FROM ENROLLMENT GROUP BY SID HAVING COUNT(*) > 5);
#26.Add column Mobile number in student table with default value '9999999999'.
ALTER TABLE STUDENT 
ADD COLUMN MOBILE_NUMBER VARCHAR(10) DEFAULT '9999999999';

SELECT * FROM STUDENT;

#27.Find the total number of student whose age > 20. 
SELECT COUNT(*) AS TOTAL_NUMBER_OF_STUDENT
FROM STUDENT 
WHERE DATE_SUB(CURDATE(),INTERVAL 20 YEAR) > DOB; 
 


#28.Find names of students who are born in 2001 and are enrolled in at least one society. 
SELECT STUDENT_NAME
FROM STUDENT
WHERE YEAR(DOB) = 2001 AND ROLL_NO IN (SELECT ROLL_NO FROM ENROLLMENT); 


#29.Count all societies whose names start with 'S' and end with 't' and at least 5 students enrolled  in the society. 
SELECT SOC_NAME
FROM SOCIETY
WHERE SOC_NAME LIKE 'S%T'
AND (SELECT COUNT(*) FROM ENROLLMENT WHERE ENROLLMENT.SID = SOCIETY.SOC_ID) >=5; 

#30.Display the following information: 
# Society name,Mentor name ,Total Capacity, Total enrolled, Unfilled Seats 9

SELECT SOC_NAME,MENTOR_NAME,TOTAL_SEATS AS TOTAL_CAPACITY,
(SELECT COUNT(*) FROM ENROLLMENT WHERE ENROLLMENT.SID = SOCIETY.SOC_ID) AS TOTAL_ENROLLED,
TOTAL_SEATS - (SELECT COUNT(*)FROM ENROLLMENT WHERE ENROLLMENT.SID = SOCIETY.SOC_ID) AS UNFILLED_SEATS
FROM SOCIETY;
